plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.0'
    id 'com.enonic.xp.app' version '1.1.0'
    id 'com.moowork.node' version '1.2.0'
}

apply from: "$rootDir/gradle/defaults.gradle"

app {
    name = 'com.enonic.xp.app.main'
    group = 'com.enonic.xp'
    displayName = 'Enonic XP Home App'
    systemVersion = "${xpVersion}"
    systemApp = true
}

dependencies {
    compile "com.enonic.xp:admin-api:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    include "com.enonic.lib:lib-mustache:2.0.0-A1"
}

node {
    download = true
    version = '8.10.0'
}

task flush( type: Delete, dependsOn: clean ) {
    description = 'Clean the project from built sources and dependencies'
    delete '.xp'
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = [ 'install', '--force' ]
}

task lint( type: NpmTask, dependsOn: npmInstall ) {
    args = [ 'run', 'lint' ]
    inputs.files fileTree( dir: 'modules', include: '**/src/main/**.*' )
    outputs.dir file('gradle')
    outputs.upToDateWhen { false }
}

task webpack( type: NodeTask, dependsOn: lint ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    description = 'Build UI resources (js, css, etc).'
    inputs.dir 'src/main'
    outputs.dir "$buildDir/resources/main"
    script = file( './node_modules/webpack/bin/webpack' )
}

task cleanNode( type: Delete ) {
    delete 'node_modules'
}

jar {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.js'
    exclude '**/*.d.ts'

    def whitelist = [
        /.*bundle\.js$/,
    ] as List

    if (isProd()) {
        exclude '**/*.map'
    } else {
        whitelist.add( /.*\.map$/ )
    }

    exclude {
        FileTreeElement el -> !el.directory && el.relativePath.contains('assets/js') && (!whitelist.any { re -> el.relativePath.toString().matches( re ) })
    }

    dependsOn += webpack
}

jar.outputs.dir "${buildDir}/resources/main"
processResources.dependsOn += unpackDevResources

if ( hasProperty( 'env' ) )
{
    addBuildDependency()
    applyExcludedTasks()
}

def applyExcludedTasks() {
    def libAdminUi = gradle.includedBuild( 'lib-admin-ui' )
    Closure permittedTasks = { it == 'lint' || it == 'test' }
    def excludedTasks = gradle.startParameter.getExcludedTaskNames().findAll( permittedTasks )
    libAdminUi.getLoadedSettings().getStartParameter().setExcludedTaskNames( excludedTasks )
}

def addBuildDependency() {
    def buildTask = gradle.includedBuild( 'lib-admin-ui' ).task( ':build' )
    def unpackDevResources = tasks.findByPath( ":unpackDevResources" )

    build.dependsOn += buildTask
    clean.dependsOn += gradle.includedBuild( 'lib-admin-ui' ).task( ':clean' )
    flush.dependsOn += gradle.includedBuild( 'lib-admin-ui' ).task( ':flush' )
    webpack.dependsOn += unpackDevResources
    unpackDevResources.dependsOn += buildTask
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}

def isProd() {
    return hasProperty( 'env' ) ? (env == 'prod') : true
}
