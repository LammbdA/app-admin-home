import com.enonic.uitest.server.ServerInstance

plugins {
    id 'java'
    id 'maven'
    id 'com.enonic.defaults' version '1.0.3'
    id 'com.moowork.node' version '0.13'
    id 'com.moowork.gulp' version '0.13'
}

group = 'com.enonic.xp.js_testing'
version = '1.0'

configurations {
    distro
}

enonic {
    publishRepo = 'inhouse'
}

ext {
    xpVersion = '7.0.0-SNAPSHOT'
    unpackDir = "$buildDir${File.separator}install"
    screenshotsDir = "$buildDir${File.separator}screenshots"
    reportsDir = "$buildDir${File.separator}reports"
    distroDir = "$unpackDir${File.separator}enonic-xp-$xpVersion"
    deployDir = "$distroDir${File.separator}home${File.separator}deploy"
    allureResultsDir = "allure-results"
    testDataDir = "$projectDir${File.separator}test-data${File.separator}common-config"
    xpHome = "$distroDir${File.separator}home"
    configDir = "$xpHome${File.separator}config"
    seleniumDir = "$projectDir${File.separator}test-data${File.separator}selenium"
    xpServer = new ServerInstance()
}
task ensureScreenshotsDirectory {
    doLast {
        mkdir screenshotsDir
    }
}
task copyConfig( type: Copy ) {
    println testDataDir
    from testDataDir
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
}

dependencies {
    compile "com.enonic.xp:core-api:$xpVersion"
    distro "com.enonic.xp:distro:$xpVersion@zip"
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task zipScreenshots( type: Zip ) {
    from screenshotsDir
    include '*'
    include '*/*'
    classifier 'screenshots'
}

task zipAllure( type: Zip ) {
    from allureResultsDir
    include '*'
    include '*/*'
    classifier 'allureResults'
}

artifacts {
    archives zipScreenshots
    archives zipAllure
}

jar.enabled = true

task startServer( dependsOn: [unpackDistro, copyConfig] ) {
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.startupDelay = 40000
        xpServer.start()
    }
    copyConfig.mustRunAfter unpackDistro
}

tasks.withType( Test ) {
    jvmArgs '-Xms128m', '-Xmx1024m'
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        displayGranularity = 0
    }
}
task startSeleniumDaemon( type: com.github.psxpaul.task.ExecFork ) {
    commandLine = "${seleniumDir}${File.separator}selenium-server.sh"
    standardOutput = "${buildDir}${File.separator}selenium-daemon.log"
    errorOutput = "${buildDir}${File.separator}selenium-daemon-error.log"
}
task testAdminHomeApp( type: GulpTask, dependsOn: [npmInstall, startSeleniumDaemon, startServer, ensureScreenshotsDirectory] ) {
    inputs.files fileTree( dir: '.' )
    outputs.files fileTree( dir: '/test-results' )
    args = ['test']
    startServer.mustRunAfter npmInstall
    ensureScreenshotsDirectory.mustRunAfter startServer
}

task testAdminHomeAppLocally( type: GulpTask, dependsOn: [npmInstall] ) {
    inputs.files fileTree( dir: '.' )
    outputs.files fileTree( dir: '/test-results' )
    args = ['test']
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'http://repo.enonic.com/public'
    }
}
